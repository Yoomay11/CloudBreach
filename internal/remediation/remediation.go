package remediation

import (
	"fmt"
	"strings"
	"time"

	"github.com/sirupsen/logrus"
)

// RemediationType 修复类型
type RemediationType string

const (
	RemediationTypePatch  RemediationType = "patch"
	RemediationTypeConfig RemediationType = "config"
	RemediationTypeCode   RemediationType = "code"
	RemediationTypePolicy RemediationType = "policy"
)

// RemediationPriority 修复优先级
type RemediationPriority string

const (
	PriorityCritical RemediationPriority = "critical"
	PriorityHigh     RemediationPriority = "high"
	PriorityMedium   RemediationPriority = "medium"
	PriorityLow      RemediationPriority = "low"
)

// RemediationStatus 修复状态
type RemediationStatus string

const (
	StatusPending   RemediationStatus = "pending"
	StatusGenerated RemediationStatus = "generated"
	StatusApplied   RemediationStatus = "applied"
	StatusFailed    RemediationStatus = "failed"
)

// Suggestion 修复建议
type Suggestion struct {
	ID          string               `json:"id"`
	Title       string               `json:"title"`
	Description string               `json:"description"`
	Type        RemediationType      `json:"type"`
	Priority    RemediationPriority  `json:"priority"`
	Status      RemediationStatus    `json:"status"`
	VulnID      string               `json:"vuln_id"`
	FilePath    string               `json:"file_path"`
	LineNumber  int                  `json:"line_number,omitempty"`
	OriginalCode string              `json:"original_code,omitempty"`
	FixedCode   string               `json:"fixed_code,omitempty"`
	Commands    []string             `json:"commands,omitempty"`
	CreatedAt   time.Time            `json:"created_at"`
	UpdatedAt   time.Time            `json:"updated_at"`
}

// PullRequest Pull Request信息
type PullRequest struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Branch      string    `json:"branch"`
	URL         string    `json:"url"`
	Status      string    `json:"status"`
	CreatedAt   time.Time `json:"created_at"`
}

// RemediationRequest 修复请求
type RemediationRequest struct {
	VulnID      string            `json:"vuln_id"`
	VulnType    string            `json:"vuln_type"`
	Severity    string            `json:"severity"`
	FilePath    string            `json:"file_path"`
	LineNumber  int               `json:"line_number,omitempty"`
	Context     map[string]string `json:"context,omitempty"`
	AutoApply   bool              `json:"auto_apply,omitempty"`
}

// RemediationResponse 修复响应
type RemediationResponse struct {
	Suggestions []Suggestion  `json:"suggestions"`
	PullRequest *PullRequest  `json:"pull_request,omitempty"`
	Message     string        `json:"message"`
	Success     bool          `json:"success"`
}

// Service 修复建议服务
type Service struct {
	logger *logrus.Logger
}

// NewService 创建修复建议服务
func NewService(logger *logrus.Logger) *Service {
	return &Service{
		logger: logger,
	}
}

// GenerateSuggestions 生成修复建议
func (s *Service) GenerateSuggestions(req RemediationRequest) (*RemediationResponse, error) {
	s.logger.WithFields(logrus.Fields{
		"vuln_id":   req.VulnID,
		"vuln_type": req.VulnType,
		"severity":  req.Severity,
	}).Info("Generating remediation suggestions")

	suggestions := s.generateSuggestionsForVuln(req)

	response := &RemediationResponse{
		Suggestions: suggestions,
		Message:     fmt.Sprintf("Generated %d remediation suggestions", len(suggestions)),
		Success:     true,
	}

	return response, nil
}

// ApplySuggestion 应用修复建议
func (s *Service) ApplySuggestion(suggestionID string) (*RemediationResponse, error) {
	s.logger.WithField("suggestion_id", suggestionID).Info("Applying remediation suggestion")

	// 模拟应用修复建议并创建PR
	pr := &PullRequest{
		ID:          fmt.Sprintf("pr_%d", time.Now().Unix()),
		Title:       "Security Fix: Auto-remediation",
		Description: "Automated security fix generated by CloudSecOps",
		Branch:      fmt.Sprintf("security-fix-%s", suggestionID),
		URL:         fmt.Sprintf("https://github.com/example/repo/pull/%d", time.Now().Unix()),
		Status:      "open",
		CreatedAt:   time.Now(),
	}

	response := &RemediationResponse{
		PullRequest: pr,
		Message:     "Remediation applied successfully, Pull Request created",
		Success:     true,
	}

	return response, nil
}

// GetSuggestion 获取修复建议详情
func (s *Service) GetSuggestion(suggestionID string) (*Suggestion, error) {
	s.logger.WithField("suggestion_id", suggestionID).Info("Retrieving remediation suggestion")

	// 返回示例修复建议
	suggestion := &Suggestion{
		ID:          suggestionID,
		Title:       "修复SQL注入漏洞",
		Description: "使用参数化查询替换字符串拼接",
		Type:        RemediationTypeCode,
		Priority:    PriorityHigh,
		Status:      StatusGenerated,
		VulnID:      "vuln_001",
		FilePath:    "/src/database/user.go",
		LineNumber:  45,
		OriginalCode: `query := "SELECT * FROM users WHERE id = '" + userID + "'"`+"\n"+`rows, err := db.Query(query)`,
		FixedCode:   `query := "SELECT * FROM users WHERE id = ?"`+"\n"+`rows, err := db.Query(query, userID)`,
		CreatedAt:   time.Now().Add(-1 * time.Hour),
		UpdatedAt:   time.Now(),
	}

	return suggestion, nil
}

// generateSuggestionsForVuln 为特定漏洞生成修复建议
func (s *Service) generateSuggestionsForVuln(req RemediationRequest) []Suggestion {
	var suggestions []Suggestion

	switch strings.ToLower(req.VulnType) {
	case "sql_injection":
		suggestions = append(suggestions, s.generateSQLInjectionFix(req)...)
	case "xss":
		suggestions = append(suggestions, s.generateXSSFix(req)...)
	case "insecure_config":
		suggestions = append(suggestions, s.generateConfigFix(req)...)
	case "privilege_escalation":
		suggestions = append(suggestions, s.generatePrivilegeFix(req)...)
	default:
		suggestions = append(suggestions, s.generateGenericFix(req))
	}

	return suggestions
}

// generateSQLInjectionFix 生成SQL注入修复建议
func (s *Service) generateSQLInjectionFix(req RemediationRequest) []Suggestion {
	return []Suggestion{
		{
			ID:          fmt.Sprintf("fix_%d_1", time.Now().Unix()),
			Title:       "使用参数化查询",
			Description: "将字符串拼接的SQL查询替换为参数化查询",
			Type:        RemediationTypeCode,
			Priority:    PriorityCritical,
			Status:      StatusGenerated,
			VulnID:      req.VulnID,
			FilePath:    req.FilePath,
			LineNumber:  req.LineNumber,
			OriginalCode: `query := "SELECT * FROM users WHERE id = '" + userID + "'"`,
			FixedCode:   `query := "SELECT * FROM users WHERE id = ?"; db.Query(query, userID)`,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
		{
			ID:          fmt.Sprintf("fix_%d_2", time.Now().Unix()),
			Title:       "输入验证",
			Description: "添加输入验证和清理",
			Type:        RemediationTypeCode,
			Priority:    PriorityHigh,
			Status:      StatusGenerated,
			VulnID:      req.VulnID,
			FilePath:    req.FilePath,
			FixedCode:   `if !isValidUserID(userID) { return errors.New("invalid user ID") }`,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
	}
}

// generateXSSFix 生成XSS修复建议
func (s *Service) generateXSSFix(req RemediationRequest) []Suggestion {
	return []Suggestion{
		{
			ID:          fmt.Sprintf("fix_%d_1", time.Now().Unix()),
			Title:       "输出编码",
			Description: "对用户输入进行HTML编码",
			Type:        RemediationTypeCode,
			Priority:    PriorityHigh,
			Status:      StatusGenerated,
			VulnID:      req.VulnID,
			FilePath:    req.FilePath,
			LineNumber:  req.LineNumber,
			OriginalCode: `<div>{{ .UserInput }}</div>`,
			FixedCode:   `<div>{{ .UserInput | html }}</div>`,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
	}
}

// generateConfigFix 生成配置修复建议
func (s *Service) generateConfigFix(req RemediationRequest) []Suggestion {
	return []Suggestion{
		{
			ID:          fmt.Sprintf("fix_%d_1", time.Now().Unix()),
			Title:       "加强安全配置",
			Description: "更新安全配置参数",
			Type:        RemediationTypeConfig,
			Priority:    PriorityMedium,
			Status:      StatusGenerated,
			VulnID:      req.VulnID,
			FilePath:    req.FilePath,
			Commands:    []string{"kubectl patch deployment app --patch '{\"spec\":{\"template\":{\"spec\":{\"securityContext\":{\"runAsNonRoot\":true}}}}}'"}, 
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
	}
}

// generatePrivilegeFix 生成权限修复建议
func (s *Service) generatePrivilegeFix(req RemediationRequest) []Suggestion {
	return []Suggestion{
		{
			ID:          fmt.Sprintf("fix_%d_1", time.Now().Unix()),
			Title:       "最小权限原则",
			Description: "限制用户和服务权限",
			Type:        RemediationTypePolicy,
			Priority:    PriorityHigh,
			Status:      StatusGenerated,
			VulnID:      req.VulnID,
			FilePath:    req.FilePath,
			Commands:    []string{"aws iam put-role-policy --role-name MyRole --policy-name RestrictedPolicy --policy-document file://policy.json"},
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
	}
}

// generateGenericFix 生成通用修复建议
func (s *Service) generateGenericFix(req RemediationRequest) Suggestion {
	return Suggestion{
		ID:          fmt.Sprintf("fix_%d", time.Now().Unix()),
		Title:       "通用安全修复",
		Description: "根据最佳实践进行安全加固",
		Type:        RemediationTypeConfig,
		Priority:    PriorityMedium,
		Status:      StatusGenerated,
		VulnID:      req.VulnID,
		FilePath:    req.FilePath,
		CreatedAt:   time.Now(),
		UpdatedAt:   time.Now(),
	}
}

// ListSuggestions 列出所有修复建议
func (s *Service) ListSuggestions() ([]Suggestion, error) {
	// 返回示例修复建议列表
	suggestions := []Suggestion{
		{
			ID:          "suggestion_001",
			Title:       "修复SQL注入漏洞",
			Description: "在用户查询中使用参数化查询",
			Type:        RemediationTypeCode,
			Priority:    PriorityCritical,
			Status:      StatusGenerated,
			VulnID:      "vuln_001",
			FilePath:    "/src/handlers/user.go",
			CreatedAt:   time.Now().Add(-2 * time.Hour),
		},
		{
			ID:          "suggestion_002",
			Title:       "加强容器安全配置",
			Description: "设置非root用户运行容器",
			Type:        RemediationTypeConfig,
			Priority:    PriorityHigh,
			Status:      StatusPending,
			VulnID:      "vuln_002",
			FilePath:    "/k8s/deployment.yaml",
			CreatedAt:   time.Now().Add(-1 * time.Hour),
		},
		{
			ID:          "suggestion_003",
			Title:       "更新依赖包版本",
			Description: "升级存在安全漏洞的依赖包",
			Type:        RemediationTypePatch,
			Priority:    PriorityMedium,
			Status:      StatusApplied,
			VulnID:      "vuln_003",
			FilePath:    "/go.mod",
			CreatedAt:   time.Now().Add(-30 * time.Minute),
		},
	}

	s.logger.WithField("total_suggestions", len(suggestions)).Info("Retrieved all remediation suggestions")
	return suggestions, nil
}